{"version":3,"sources":["components/common/homePageCard.js","components/home.js","components/common/simpleGrid.js","utils/latestPrediction.js","components/modelCard.js","components/models.js","utils/previousPredictions.js","components/graph.js","components/modelDetail.js","components/modelPredict.js","components/model.js","hooks/useFetchApi.js","App.js","reportWebVitals.js","index.js"],"names":["HomePageCard","title","link","console","log","className","to","Home","SimpleGrid","children","Grid","container","spacing","React","Children","map","child","item","xs","sm","md","getMarketClosed","today","Date","getHours","getMinutes","fetchPrediction","ticker","a","fetch","URLSearchParams","latest","res","json","data","marketClosed","getLatestPrediction","savedPrediction","JSON","parse","localStorage","getItem","latestDataAvailable","lastSavedPredDate","pred_date","setHours","getTime","key","value","setItem","stringify","ModelCard","model","setPredictionDate","url","useRouteMatch","endsWith","slice","useState","prediction","setPrediction","isLoading","setIsLoading","useEffect","Card","CardActionArea","component","RouterLink","CardContent","Typography","color","variant","gutterBottom","sx","Models","models","tickers","selectedTickers","setSelectedTickers","predictionDate","options","symbol","theme","useTheme","filteredModels","useMemo","length","filter","includes","sort","b","indexOf","Container","style","padding","Autocomplete","multiple","filterSelectedOptions","onChange","e","renderInput","params","TextField","label","InputLabelProps","palette","text","primary","align","Box","fontWeight","my","fetchPredictions","days","period","predictions","getPreviousPredictions","maxDays","predictionsData","isLatestDataAvailable","date","metaData","monthNumberToLabelMap","formatDate","split","month","parseInt","day","periods","Graph","setPredictions","selectedPeriod","setSelectedPeriod","isMounted","actual","width","height","Tabs","newValue","centered","borderBottom","borderColor","Tab","ResponsiveContainer","minWidth","LineChart","margin","top","right","left","bottom","XAxis","dataKey","tick","fill","secondary","YAxis","Label","angle","position","CartesianGrid","stroke","grey","Tooltip","contentStyle","backgroundColor","Legend","wrapperStyle","Line","type","lightBlue","strokeWidth","name","isAnimationActive","amber","ModelDetail","dateFormat","addDays","result","setDate","getDate","disableCertainDates","getDay","ModelPredict","predictionValue","setPredictionValue","disableSubmitButton","setDisableSubmitButton","preventDefault","predDate","format","RangeError","m","display","flexDirection","justifyContent","onSubmit","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","inputFormat","mask","required","shouldDisableDate","onError","reason","Button","disabled","useStyles","makeStyles","root","flexGrow","showStyle","visibility","hideStyle","Model","all_models","selectedTab","setSelectedTab","useParams","classes","toLowerCase","orientation","borderRight","bgcolor","overflow","API_BASE_URL","default_query_params","useFetchApi","endpoint","queryParams","initialData","setData","isError","setIsError","TypeError","error","ok","fetchModels","createTheme","mode","App","ThemeProvider","CssBaseline","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27fb57f5.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\"\r\n\r\nfunction HomePageCard({ title, link }) {\r\n    console.log('HomePageCard render')\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <Link to={link}>\r\n                <h1>{title}</h1>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default HomePageCard","import HomePageCard from \"./common/homePageCard\"\r\n\r\nfunction Home() {\r\n    console.log('home render')\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <HomePageCard title='Models' link='/models' />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Home","// cant use map directly on children - https://reactjs.org/docs/react-api.html#reactchildren\r\n\r\nimport React from \"react\"\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\n\r\nfunction SimpleGrid({ children }) {\r\n    console.log('SimpleGrid render')\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            {React.Children.map(children, (child) =>\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    {child}\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default SimpleGrid","function getMarketClosed() {\r\n    const today = new Date()\r\n    return today.getHours() >= 16 && today.getMinutes() >= 0\r\n}\r\n\r\nfunction saveToLocalStorage(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nconst fetchPrediction = async (ticker) => {\r\n    console.log('-fetchPrediction called-')\r\n    const res = await fetch(`https://react-stock-prediction.herokuapp.com/api/prediction/${ticker}/?` + new URLSearchParams({\r\n        latest: true,\r\n    }))\r\n    let data = await res.json()\r\n    data.marketClosed = getMarketClosed()\r\n    return data\r\n}\r\n\r\nconst getLatestPrediction = async (ticker) => {\r\n    const savedPrediction = JSON.parse(localStorage.getItem(ticker))\r\n    let latestDataAvailable = true\r\n\r\n    if (!savedPrediction)\r\n        latestDataAvailable = false\r\n    else {\r\n        const lastSavedPredDate = new Date(savedPrediction.pred_date)\r\n        const today = new Date()\r\n        // setting time to zero cuz we only want to compare dates not time \r\n        lastSavedPredDate.setHours(0, 0, 0, 0)\r\n        today.setHours(0, 0, 0, 0)\r\n\r\n        if (lastSavedPredDate < today)\r\n            latestDataAvailable = false\r\n\r\n        else if (lastSavedPredDate.getTime() === today.getTime() && savedPrediction.marketClosed !== getMarketClosed())\r\n            latestDataAvailable = false\r\n    }\r\n\r\n    if (latestDataAvailable)\r\n        return savedPrediction\r\n\r\n    const data = await fetchPrediction(ticker)\r\n    saveToLocalStorage(ticker, data)\r\n    return data\r\n}\r\n\r\nexport { getLatestPrediction, saveToLocalStorage, getMarketClosed }","import { Card, CardActionArea, CardContent, Typography } from \"@material-ui/core\"\r\nimport { useRouteMatch, Link as RouterLink } from \"react-router-dom\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { getLatestPrediction } from '../utils/latestPrediction'\r\n\r\n\r\nfunction ModelCard({ model, setPredictionDate }) {\r\n    console.log('ModelCard render')\r\n    let { url } = useRouteMatch()\r\n    if (url.endsWith('/'))\r\n        url = url.slice(0, -1)\r\n\r\n    const [prediction, setPrediction] = useState()\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchPrediction = async () => {\r\n            console.log('ModelCard fetchPrediction useEffect')\r\n            setIsLoading(true)\r\n\r\n            const data = await getLatestPrediction(model.ticker)\r\n            setPrediction(data)\r\n            setIsLoading(false)\r\n            setPredictionDate(data.pred_date)\r\n        }\r\n        fetchPrediction()\r\n    }, [model, setPredictionDate])\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <CardActionArea component={RouterLink} to={`${url}/${model.ticker}`}>\r\n                <CardContent>\r\n                    <Typography\r\n                        color=\"textPrimary\"\r\n                        variant='h5'\r\n                        gutterBottom\r\n                    >\r\n                        {model.ticker}\r\n                    </Typography>\r\n\r\n                    <Typography\r\n                        variant=\"subtitle1\"\r\n                        color='textSecondary'\r\n                    >\r\n                        Prediction\r\n                    </Typography>\r\n\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        sx={{\r\n                            color: prediction?.prediction > 0 ? 'success.main' : 'error.main'\r\n                        }}\r\n                    >\r\n                        {isLoading && 'Loading...'}\r\n                        {prediction && `${prediction?.prediction} %`}\r\n                    </Typography>\r\n\r\n                </CardContent>\r\n\r\n            </CardActionArea>\r\n        </Card >\r\n    )\r\n}\r\n\r\n\r\nexport default ModelCard","import { useState, useMemo } from 'react'\r\nimport { Autocomplete, Box, Container, Typography, TextField } from '@material-ui/core'\r\nimport { useTheme } from '@material-ui/core/styles'\r\nimport SimpleGrid from './common/simpleGrid'\r\nimport ModelCard from './modelCard'\r\n\r\n\r\nfunction Models({ models, tickers }) {\r\n    console.log('Models render')\r\n\r\n    const [selectedTickers, setSelectedTickers] = useState([])\r\n    const [predictionDate, setPredictionDate] = useState('')\r\n    const options = tickers.map(ticker => ticker.symbol)\r\n\r\n    const theme = useTheme()\r\n\r\n    const handleSelectChange = (e, options) => { setSelectedTickers(options) }\r\n\r\n    const filteredModels = useMemo(() => {\r\n        return selectedTickers.length > 0 ? models.filter(model => selectedTickers.includes(model.ticker)) : models\r\n    }, [selectedTickers, models])\r\n\r\n    // sort models based on the order in which tickes were selected in Select component\r\n    filteredModels.sort((a, b) => selectedTickers.indexOf(a.ticker) - selectedTickers.indexOf(b.ticker))\r\n\r\n\r\n    return (\r\n        <Container style={{ padding: '40px' }}>\r\n            <Autocomplete\r\n                multiple\r\n                filterSelectedOptions\r\n                options={options}\r\n                onChange={handleSelectChange}\r\n                renderInput={params => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"filled\"\r\n                        label=\"Ticker\"\r\n                        InputLabelProps={{ style: { color: theme.palette.text.primary } }}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            {predictionDate &&\r\n                <Typography variant='h4' align='center'>\r\n                    <Box fontWeight=\"fontWeightLight\" my={5}>\r\n                        Predictions for: {predictionDate}\r\n                    </Box>\r\n                </Typography>\r\n            }\r\n\r\n            <SimpleGrid>\r\n                {filteredModels.length < 1 ?\r\n                    <div>No models found</div>\r\n                    :\r\n                    filteredModels.map(model =>\r\n                        <ModelCard\r\n                            key={model.ticker}\r\n                            model={model}\r\n                            setPredictionDate={setPredictionDate} />\r\n                    )}\r\n            </SimpleGrid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Models","import { getMarketClosed } from '../utils/latestPrediction'\r\n\r\n\r\nconst fetchPredictions = async (ticker, days) => {\r\n    console.log('---fetchPredictions called---')\r\n\r\n    const res = await fetch(`https://react-stock-prediction.herokuapp.com/api/predictions/${ticker}/?` + new URLSearchParams({\r\n        period: days,\r\n    }))\r\n    const predictions = await res.json()\r\n    return predictions\r\n}\r\n\r\nconst getPreviousPredictions = async (ticker, days, maxDays) => {\r\n    const predictionsData = JSON.parse(localStorage.getItem(`${ticker}-predictions`))\r\n\r\n    if (isLatestDataAvailable(predictionsData)) {\r\n        const predictions = predictionsData.predictions\r\n        if (predictions && predictions.length === maxDays)\r\n            return predictions.slice(maxDays - days, predictions.length)\r\n    }\r\n\r\n    const predictions = await fetchPredictions(ticker, days)\r\n    if (days === maxDays) {\r\n        const date = new Date()\r\n        date.setHours(0, 0, 0, 0)\r\n\r\n        const metaData = { date, marketClosed: getMarketClosed() }\r\n        const predictionsData = { predictions, metaData }\r\n        localStorage.setItem(`${ticker}-predictions`, JSON.stringify(predictionsData))\r\n    }\r\n    return predictions\r\n}\r\n\r\n\r\nconst isLatestDataAvailable = (predictionsData) => {\r\n    if (!predictionsData?.metaData)\r\n        return false\r\n\r\n    let { date, marketClosed } = predictionsData.metaData\r\n\r\n    // date stored in localStorage is of type string so need to parse it to get date object \r\n    date = new Date(date)\r\n\r\n    const today = new Date()\r\n    today.setHours(0, 0, 0, 0)\r\n\r\n    if (date.getTime() !== today.getTime() || marketClosed !== getMarketClosed())\r\n        return false\r\n\r\n    return true\r\n}\r\n\r\nexport { getPreviousPredictions }\r\n","import { Tabs, Tab } from \"@material-ui/core\"\r\nimport { Typography } from '@material-ui/core'\r\nimport { useState, useEffect } from 'react'\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label, ResponsiveContainer } from 'recharts'\r\nimport { getPreviousPredictions } from '../utils/previousPredictions'\r\nimport { amber, lightBlue } from \"@material-ui/core/colors\"\r\nimport { useTheme } from \"@material-ui/core/styles\"\r\n\r\n\r\nconst monthNumberToLabelMap = ['Jan', 'Feb', 'March', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\r\n\r\nfunction formatDate(date) {\r\n    date = date.split('-')\r\n    const month = monthNumberToLabelMap[parseInt(date[1]) - 1]\r\n    const day = parseInt(date[2])\r\n    return `${day} ${month}`\r\n}\r\n\r\n\r\nconst periods = [{ days: 7, label: '1 week' }, { days: 14, label: '2 weeks' }]\r\nconst defaultPeriodIdx = 0\r\n\r\n\r\nfunction Graph({ ticker }) {\r\n    console.log('Graph render')\r\n\r\n    const [predictions, setPredictions] = useState([])\r\n    const [selectedPeriod, setSelectedPeriod] = useState(defaultPeriodIdx)\r\n\r\n    const theme = useTheme()\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('Graph fetchPredictions useEffect')\r\n\r\n        let isMounted = true\r\n        // set predictions to [] so that if switching from one period to other, Loading... shows up instead of the old graph\r\n        setPredictions([])\r\n\r\n        const fetchPredictions = async () => {\r\n            const days = periods[selectedPeriod].days\r\n            const predictions = await getPreviousPredictions(ticker, days, periods[periods.length - 1].days)\r\n\r\n            // when selectedPeriod changes this useEffect will call the cleanup func and isMounted will be set to false and then setPredictions won't be called for previous selectedPeriod \r\n            if (isMounted)\r\n                setPredictions(predictions)\r\n        }\r\n\r\n        fetchPredictions()\r\n\r\n        return () => isMounted = false\r\n    }, [ticker, selectedPeriod])\r\n\r\n\r\n    const data = predictions.map(prediction =>\r\n        ({ date: formatDate(prediction.pred_date), prediction: prediction.prediction, actual: prediction.actual }))\r\n\r\n    const handleTabChange = (e, newValue) => { setSelectedPeriod(newValue) }\r\n\r\n\r\n    return (\r\n        <div style={{ width: '100%', height: '100%' }} >\r\n            <Tabs\r\n                value={selectedPeriod}\r\n                onChange={handleTabChange}\r\n                centered\r\n                sx={{\r\n                    borderBottom: 1,\r\n                    borderColor: 'divider'\r\n                }}\r\n            >\r\n                {periods.map(period => <Tab key={period.days} label={period.label} />)}\r\n            </Tabs>\r\n\r\n            {data.length > 0 ?\r\n                <ResponsiveContainer minWidth={100}>\r\n                    <LineChart\r\n                        data={data}\r\n                        margin={{ top: 30, right: 30, left: 30, bottom: 30 }}\r\n                    >\r\n                        <XAxis\r\n                            dataKey=\"date\"\r\n                            tick={{ fill: theme.palette.text.secondary }}\r\n                        />\r\n                        <YAxis\r\n                            padding={{ bottom: 30 }}\r\n                            tick={{ fill: theme.palette.text.secondary }}\r\n                        >\r\n                            <Label\r\n                                value='% Change in Closing Price'\r\n                                angle={-90}\r\n                                position=\"insideBottomLeft\"\r\n                                style={{ fill: theme.palette.text.secondary }}\r\n                            />\r\n                        </YAxis>\r\n                        <CartesianGrid stroke={theme.palette.grey[800]} />\r\n                        <Tooltip contentStyle={{ backgroundColor: theme.palette.grey[900] }} />\r\n                        <Legend wrapperStyle={{ position: 'relative' }} />\r\n                        <Line\r\n                            type=\"monotone\"\r\n                            dataKey=\"prediction\"\r\n                            stroke={lightBlue[200]}\r\n                            strokeWidth={2}\r\n                            // dot={false}\r\n                            name='Prediction'\r\n                            isAnimationActive={false}\r\n                        />\r\n                        <Line\r\n                            type=\"monotone\"\r\n                            dataKey=\"actual\"\r\n                            stroke={amber[300]}\r\n                            strokeWidth={2}\r\n                            // dot={false}\r\n                            name='Actual'\r\n                            isAnimationActive={false}\r\n                        />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n                : <Typography variant='h6'>Loading graph...</Typography>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph","import { Box, Container, Typography } from '@material-ui/core'\r\nimport Graph from './graph'\r\n\r\n\r\nfunction ModelDetail({ model }) {\r\n    console.log('ModelDetail render')\r\n\r\n    return (\r\n        <Container style={{ width: '80%', height: '80%' }}>\r\n            {model ?\r\n                <div>\r\n                    <Typography variant='h3' align='center'>\r\n                        <Box fontWeight=\"fontWeightLight\" my={2}>\r\n                            {model.ticker}\r\n                        </Box>\r\n                    </Typography>\r\n                </div>\r\n                : <div>Loading....</div>}\r\n\r\n            <Graph ticker={model.ticker} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ModelDetail","import { Button, Container, TextField, Typography } from \"@material-ui/core\"\r\nimport { DatePicker, LocalizationProvider } from \"@material-ui/lab\"\r\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns'\r\nimport { format } from \"date-fns\"\r\nimport { useState } from \"react\"\r\nimport { getMarketClosed } from \"../utils/latestPrediction\"\r\n\r\nconst dateFormat = 'yyyy-MM-dd'\r\n\r\nconst addDays = (date, days) => {\r\n    var result = new Date(date)\r\n    result.setDate(result.getDate() + days)\r\n    return result\r\n}\r\n\r\nconst disableCertainDates = date => {\r\n    //disable Sunday and Saturday\r\n    if (date.getDay() === 0 || date.getDay() === 6)\r\n        return true\r\n\r\n    const today = new Date()\r\n    today.setHours(0, 0, 0, 0)\r\n    date.setHours(0, 0, 0, 0)\r\n\r\n    //Friday\r\n    if (today.getDay() === 5) {\r\n        if (getMarketClosed())\r\n            return date > addDays(today, 3)\r\n        return date > today\r\n    }\r\n\r\n    //Saturday\r\n    if (today.getDay() === 6)\r\n        return date > addDays(today, 2)\r\n\r\n    if (date > addDays(today, 1))\r\n        return true\r\n\r\n    // if date is today + 1, then disable it if market not closed\r\n    if (date.getTime() === addDays(today, 1).getTime()) {\r\n        if (getMarketClosed())\r\n            return false\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n\r\nfunction ModelPredict({ model }) {\r\n    console.log('ModelPredict render')\r\n\r\n    const [predictionDate, setPredictionDate] = useState(null)\r\n    const [predictionValue, setPredictionValue] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [disableSubmitButton, setDisableSubmitButton] = useState(false)\r\n\r\n    const fetchPrediction = async (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n\r\n        let predDate\r\n        try {\r\n            predDate = format(predictionDate, dateFormat)\r\n        }\r\n        catch (e) {\r\n            if (e instanceof RangeError)\r\n                setDisableSubmitButton(true)\r\n            else\r\n                console.log(e)\r\n\r\n            setIsLoading(false)\r\n            setPredictionValue('')\r\n            return\r\n        }\r\n\r\n        const res = await fetch(`https://react-stock-prediction.herokuapp.com/api/prediction/${model.ticker}/?` + new URLSearchParams({\r\n            pred_date: predDate,\r\n        }))\r\n        const predictionValue = await res.json()\r\n        setPredictionValue(predictionValue)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    const handlePredictionDateChange = date => {\r\n        try {\r\n            format(date, dateFormat)\r\n        }\r\n        catch (e) {\r\n            if (e instanceof RangeError)\r\n                setDisableSubmitButton(true)\r\n            else\r\n                console.log(e)\r\n        }\r\n        finally {\r\n            setPredictionDate(date)\r\n        }\r\n    }\r\n\r\n    const handleDatePickerError = (reason, value) => {\r\n        switch (reason) {\r\n            case \"invalidDate\":\r\n                setDisableSubmitButton(true)\r\n                break;\r\n\r\n            case \"shouldDisableDate\":\r\n                setDisableSubmitButton(true)\r\n                break;\r\n\r\n            case null:\r\n                setDisableSubmitButton(false)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            sx={{\r\n                m: 5,\r\n                width: '80%',\r\n                height: '80%',\r\n            }}\r\n        >\r\n            {model ?\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        width: '50%',\r\n                        height: '40%',\r\n                        justifyContent: 'space-between'\r\n                    }}\r\n                >\r\n                    <form\r\n                        onSubmit={fetchPrediction}\r\n                        style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            height: '50%',\r\n                            justifyContent: 'space-between'\r\n                        }}\r\n                    >\r\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                            <DatePicker\r\n                                label=\"Prediction Date\"\r\n                                value={predictionDate}\r\n                                onChange={handlePredictionDateChange}\r\n                                inputFormat={dateFormat}\r\n                                mask='____-__-__'\r\n                                renderInput={(params) => <TextField {...params} required />}\r\n                                shouldDisableDate={disableCertainDates}\r\n                                onError={handleDatePickerError}\r\n                            />\r\n                        </LocalizationProvider>\r\n                        <Button\r\n                            disabled={disableSubmitButton}\r\n                            type='submit'\r\n                            variant='contained'\r\n                        >\r\n                            Predict\r\n                        </Button>\r\n                    </form>\r\n                    <Typography variant='h5'>\r\n                        {isLoading && 'Predicting ...'}\r\n                        {!isLoading && predictionValue && `Prediction: ${predictionValue.prediction}`}\r\n                    </Typography>\r\n                </div >\r\n                : <div>Loading....</div>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ModelPredict","import { useState } from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { Tabs, Tab, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport ModelDetail from \"./modelDetail\"\r\nimport ModelPredict from \"./modelPredict\"\r\n\r\nconst useStyles = makeStyles(({\r\n    root: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n}))\r\n\r\n\r\nconst showStyle = {\r\n    visibility: 'visible',\r\n    width: '100%',\r\n    height: '100%',\r\n}\r\n\r\nconst hideStyle = {\r\n    visibility: 'hidden',\r\n    width: 0,\r\n    height: 0,\r\n}\r\n\r\nfunction Model({ all_models }) {\r\n    console.log('Model render')\r\n\r\n    const [selectedTab, setSelectedTab] = useState(0)\r\n\r\n    const { symbol } = useParams()\r\n    const classes = useStyles()\r\n\r\n    const model = all_models.filter(model => model.ticker.toLowerCase() === symbol.toLowerCase())[0]\r\n\r\n    return (\r\n        <div style={{ width: '100%', height: '100%' }}>\r\n            {all_models.length < 1 &&\r\n                <Typography variant='h4'>\r\n                    Loading...\r\n                </Typography>}\r\n\r\n            {all_models.length > 0 && !model &&\r\n                <Typography variant='h2'>\r\n                    404 Not Found\r\n                </Typography>\r\n            }\r\n\r\n            {model &&\r\n                <div className={classes.root}>\r\n                    <Tabs\r\n                        value={selectedTab}\r\n                        onChange={(e, newValue) => { setSelectedTab(newValue) }}\r\n                        orientation=\"vertical\"\r\n                        sx={{\r\n                            borderRight: 1,\r\n                            borderColor: 'divider',\r\n                            bgcolor: 'grey.900',\r\n                            overflow: 'visible',\r\n                        }}\r\n                    >\r\n                        <Tab label=\"Details\" />\r\n                        <Tab label=\"Predict\" />\r\n                    </Tabs>\r\n\r\n                    <div style={selectedTab === 0 ? showStyle : hideStyle}>\r\n                        <ModelDetail model={model} />\r\n                    </div>\r\n\r\n                    <div style={selectedTab === 1 ? showStyle : hideStyle}>\r\n                        <ModelPredict model={model} />\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Model","import { useEffect, useState } from 'react'\r\n\r\nconst API_BASE_URL = 'https://react-stock-prediction.herokuapp.com/api'\r\n\r\n// If you directly write queryParams={} in useFetchApi then on every render it will be a different obj and will cause infinite loop \r\nconst default_query_params = {}\r\n\r\nconst useFetchApi = (endpoint, queryParams = default_query_params, initialData = []) => {\r\n    const [data, setData] = useState(initialData)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isError, setIsError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log('useFetchApi useEffect')\r\n        const fetchModels = async () => {\r\n            setIsLoading(true)\r\n            setIsError(false)\r\n\r\n            let res\r\n            try {\r\n                res = await fetch(`${API_BASE_URL}/${endpoint}/?` + new URLSearchParams(queryParams))\r\n            }\r\n            catch (e) {\r\n                if (e instanceof (TypeError)) {\r\n                    setIsError(true)\r\n                    setIsLoading(false)\r\n                }\r\n                else\r\n                    console.error(e)\r\n                return\r\n            }\r\n\r\n            if (!res.ok) {\r\n                setIsError(true)\r\n                setIsLoading(false)\r\n                return\r\n            }\r\n\r\n            const data = await res.json()\r\n            setData(data)\r\n            setIsLoading(false)\r\n        }\r\n        fetchModels()\r\n    }, [endpoint, queryParams])\r\n\r\n    return [data, isLoading, isError]\r\n}\r\n\r\nexport default useFetchApi","import Home from './components/home'\r\nimport Models from './components/models'\r\nimport Model from './components/model'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport { CssBaseline, Typography } from '@material-ui/core'\r\nimport { ThemeProvider, createTheme } from \"@material-ui/core/styles\"\r\nimport useFetchApi from './hooks/useFetchApi'\r\n\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"dark\"\r\n  }\r\n})\r\n\r\nfunction App() {\r\n  console.log('app render')\r\n  const [models, isLoading, isError] = useFetchApi('models')\r\n  const tickers = models.map(model => model.ticker)\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <div className=\"App\" style={{ width: '100vw', height: '100vh' }}>\r\n        {isLoading && <Typography variant='h4'>Loading...</Typography>}\r\n        {isError && <Typography variant='h4'>Something went wrong. Please try again</Typography>}\r\n\r\n        {!isLoading && !isError &&\r\n          <Router>\r\n            <Switch>\r\n              <Route exact path='/' ><Home /> </Route>\r\n              <Route exact path='/models' ><Models models={models} tickers={tickers} /> </Route>\r\n              <Route path='/models/:symbol' ><Model all_models={models} /> </Route>\r\n            </Switch>\r\n          </Router>\r\n        }\r\n      </div>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}